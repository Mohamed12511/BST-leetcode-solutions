// Problem: Postorder Traversal of a Binary Tree.
// Approach:
//          - Use a recursive approach to traverse the tree in postorder (left, right, root).
//          - First, recursively visit the left subtree, followed by the right subtree.
//          - Finally, visit the root node and add its value to the result vector.
// Time Complexity: O(n), where n is the number of nodes in the tree.
//                  Each node is visited once during the recursion.
// Space Complexity: O(n), where n is the number of nodes in the tree, due to the space used by the result vector and the recursive call stack.

class Solution {
public:
    void NumbersTo_vector(TreeNode* root, vector<int>& v) {
        if (root == nullptr) return;
        NumbersTo_vector(root->left, v);
        NumbersTo_vector(root->right, v);
        v.push_back(root->val);
    }

    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> v;
        NumbersTo_vector(root, v);
        return v;
    }
};
