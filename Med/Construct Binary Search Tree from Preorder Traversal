/**
 * Problem: Construct a Binary Search Tree (BST) from a preorder traversal.
 *
 * Task:
 * - Given an array of integers representing the preorder traversal of a BST,
 *   you need to reconstruct the BST.
 *
 * Approach:
 * 1. **Inorder traversal** of the BST is sorted, so we can use this fact to identify the position of nodes in the tree.
 *    - In preorder traversal, the first element is always the root, and subsequent elements are part of the left or right subtrees.
 *    - In inorder traversal, elements smaller than the root lie to the left, and those greater than the root lie to the right.
 * 
 * 2. **Steps**:
 *    - Build a map (`m`) to store the positions of the elements in the inorder array.
 *    - Use a recursive helper function (`BuildBST`) to construct the tree using preorder and inorder information.
 * 
 * 3. **Recursive construction**:
 *    - For each node in preorder, find its position in the inorder array using the map and recursively construct the left and right subtrees.
 *
 * Time Complexity:
 * - O(N), where N is the number of nodes in the tree. We visit each node once during the construction.
 * - Sorting the inorder array takes O(N log N), but the overall complexity remains dominated by the linear time for tree construction.
 *
 * Space Complexity:
 * - O(N), for storing the inorder map and the tree structure.
 */

class Solution {
public:
      void buildmap(map<int,int>&m,vector<int>v){
        for(int i=0;i<v.size();i++){
            m[v[i]]=i;
        }
      }
     TreeNode*BuildBST(vector<int>&pre,map<int,int>&m,int &Preorderindex, int left,int right){
        if(left>right)return NULL;
        int Val=pre[Preorderindex];
        Preorderindex++;
        TreeNode*root=new TreeNode(Val);
        int Inorder=m[Val];

        root->left=BuildBST(pre,m,Preorderindex,left,Inorder-1);
        root->right=BuildBST(pre,m,Preorderindex,Inorder+1,right);
        return root;

     }




    TreeNode* bstFromPreorder(vector<int>& preorder) {
        vector<int>inorder=preorder;
        sort(inorder.begin(),inorder.end());
        map<int,int>m;
        buildmap(m,inorder);
      int preorderindex=0;
        return BuildBST(preorder,m,preorderindex,0,inorder.size()-1);

    }
};
