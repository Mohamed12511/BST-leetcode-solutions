/**
 * Problem: Insert a value into a Binary Search Tree (BST).
 * 
 * A Binary Search Tree (BST) is a binary tree where:
 * - The left subtree of a node contains only nodes with values less than the node's value.
 * - The right subtree of a node contains only nodes with values greater than the node's value.
 * - Both the left and right subtrees are also BSTs.
 * 
 * Task: Given the root of a BST and a value to insert, insert the value into the BST 
 *       such that it remains a valid BST. Return the root of the updated tree.
 * 
 * Approach:
 * - If the tree is empty, create a new node with the given value and return it as the root.
 * - Traverse the tree recursively:
 *      - If the value to insert is smaller than the current node's value, go to the left subtree.
 *      - If the value to insert is greater than the current node's value, go to the right subtree.
 * - Insert the new value at the appropriate position where the subtree is empty.
 * - Return the root of the updated tree.
 * 
 * Time Complexity: O(h), where h is the height of the tree.
 * Space Complexity: O(h), due to the recursive stack space.
 */

class Solution {
public:
    TreeNode*Insert(TreeNode*root,TreeNode*NewNode){
        if(root==NULL){
            root=NewNode;
        }
        else if(NewNode->val<root->val){
            root->left=Insert(root->left,NewNode);
        }
        else if(NewNode->val>root->val){
            root->right=Insert(root->right,NewNode);
        }
        return root;
    }
    TreeNode* insertIntoBST(TreeNode* root, int val) {
        TreeNode*NewNode=new TreeNode(val);
        NewNode->left=NULL;NewNode->right=NULL;
      root= Insert(root,NewNode);
      return root;
    }
};
