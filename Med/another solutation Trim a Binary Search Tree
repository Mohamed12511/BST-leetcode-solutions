/**
 * Problem: Trim a Binary Search Tree (BST)
 *
 * Task:
 * - Given the root of a BST and a range `[low, high]`, remove all nodes with values outside the range.
 * - The resulting tree must maintain its BST properties.
 *
 * Approach:
 * 1. **Recursive Trimming**:
 *    - **Base Case**: If the node is `NULL`, return `NULL`.
 *    - If the node's value is within the range `[low, high]`:
 *      - Recursively trim the left and right subtrees.
 *      - Return the current node as part of the trimmed tree.
 *    - If the node's value is less than `low`:
 *      - Trim the right subtree since all nodes in the left subtree are also less than `low`.
 *    - If the node's value is greater than `high`:
 *      - Trim the left subtree since all nodes in the right subtree are also greater than `high`.
 *
 * Time Complexity:
 * - **O(N)**, where N is the number of nodes in the tree. Each node is visited once.
 *
 * Space Complexity:
 * - **O(H)**, where H is the height of the tree, for the recursion stack.
 *
 * Example:
 * - Input: root = [3,0,4,null,2,null,null,1], low = 1, high = 3
 * - Output: [3,2,null,1]
 */

class Solution {
public:
     TreeNode*trim(TreeNode*root,int low,int high){
        if(!root)return NULL;
       if(root->val>=low&&root->val<=high){
        root->left=trim(root->left,low,high);
        root->right=trim(root->right,low,high);
        return root;
       }
       else if(root->val<low){
        return trim(root->right,low,high);
       }
       else if(root->val>high){
        return trim(root->left,low,high);
       }
       return root;
     }
    TreeNode* trimBST(TreeNode* root, int low, int high) {
        return trim(root,low,high);
    }
};
